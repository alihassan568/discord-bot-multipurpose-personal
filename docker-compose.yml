version: '3.8'

services:
  # PostgreSQL Database
  postgres:
    image: postgres:15-alpine
    container_name: discord-bot-db
    environment:
      POSTGRES_DB: discord_bot
      POSTGRES_USER: bot_user
      POSTGRES_PASSWORD: secure_password_change_this
    volumes:
      - postgres_data:/var/lib/postgresql/data
      - ./scripts/init-db.sql:/docker-entrypoint-initdb.d/init-db.sql
    ports:
      - "5432:5432"
    networks:
      - bot-network
    restart: unless-stopped
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U bot_user -d discord_bot"]
      interval: 10s
      timeout: 5s
      retries: 5

  # Redis Cache
  redis:
    image: redis:7-alpine
    container_name: discord-bot-redis
    command: redis-server --requirepass secure_redis_password_change_this
    volumes:
      - redis_data:/data
    ports:
      - "6379:6379"
    networks:
      - bot-network
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "redis-cli", "--raw", "incr", "ping"]
      interval: 10s
      timeout: 3s
      retries: 5

  # Discord Bot
  bot:
    build:
      context: .
      target: production
    container_name: discord-bot
    environment:
      NODE_ENV: production
      DATABASE_URL: postgresql://bot_user:secure_password_change_this@postgres:5432/discord_bot
      REDIS_URL: redis://:secure_redis_password_change_this@redis:6379
      DISCORD_TOKEN: ${DISCORD_TOKEN}
      DISCORD_CLIENT_ID: ${DISCORD_CLIENT_ID}
      DISCORD_CLIENT_SECRET: ${DISCORD_CLIENT_SECRET}
      SESSION_SECRET: ${SESSION_SECRET}
      JWT_SECRET: ${JWT_SECRET}
      DEFAULT_PREFIX: "!"
      OWNER_IDS: ${OWNER_IDS}
      PORT: 3000
    volumes:
      - bot_logs:/app/logs
      - bot_uploads:/app/uploads
      - bot_transcripts:/app/transcripts
    ports:
      - "3000:3000"
    networks:
      - bot-network
    depends_on:
      postgres:
        condition: service_healthy
      redis:
        condition: service_healthy
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "wget", "--no-verbose", "--tries=1", "--spider", "http://localhost:3000/health"]
      interval: 30s
      timeout: 10s
      retries: 3

  # Lavalink for Music (Optional)
  lavalink:
    image: fredboat/lavalink:dev
    container_name: discord-bot-lavalink
    volumes:
      - ./lavalink/application.yml:/opt/Lavalink/application.yml
      - lavalink_logs:/opt/Lavalink/logs
    ports:
      - "2333:2333"
    networks:
      - bot-network
    restart: unless-stopped
    environment:
      - SERVER_PORT=2333
      - LAVALINK_SERVER_PASSWORD=youshallnotpass

  # Web Dashboard (Optional)
  dashboard:
    build:
      context: ./dashboard
      dockerfile: Dockerfile
    container_name: discord-bot-dashboard
    environment:
      REACT_APP_API_URL: http://localhost:3000/api
      REACT_APP_DISCORD_CLIENT_ID: ${DISCORD_CLIENT_ID}
    ports:
      - "3001:3000"
    networks:
      - bot-network
    restart: unless-stopped

volumes:
  postgres_data:
  redis_data:
  bot_logs:
  bot_uploads:
  bot_transcripts:
  lavalink_logs:

networks:
  bot-network:
    driver: bridge