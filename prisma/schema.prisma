// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "sqlite"
  url      = "file:./dev.db"
}

model Guild {
  id                String             @id
  name              String
  prefix            String             @default("!")
  settings          String             @default("{}")
  antiNukeEnabled   Boolean            @default(true)
  antiNukeSettings  String             @default("{}")
  createdAt         DateTime           @default(now())
  updatedAt         DateTime           @updatedAt
  
  // Relations
  moderationLogs    ModerationLog[]
  tickets           Ticket[]
  roleSnapshots     RoleSnapshot[]
  vanityLogs        VanityLog[]
  musicQueues       MusicQueue[]
  userProfiles      UserProfile[]
  birthdays         Birthday[]
  extraOwners       ExtraOwner[]
  
  @@map("guilds")
}

model User {
  id            String      @id
  username      String
  discriminator String?
  avatar        String?
  globalName    String?
  createdAt     DateTime    @default(now())
  updatedAt     DateTime    @updatedAt
  
  // Relations
  moderationLogs       ModerationLog[]   @relation("ModeratorLogs")
  targetedLogs         ModerationLog[]   @relation("TargetLogs")
  tickets              Ticket[]
  profiles             UserProfile[]
  birthdays            Birthday[]
  vanityLogs           VanityLog[]
  
  @@map("users")
}

model ModerationLog {
  id          String              @id @default(cuid())
  guildId     String
  action      String              // BAN, UNBAN, KICK, MUTE, etc.
  targetId    String
  moderatorId String
  reason      String?
  metadata    String              @default("{}")
  expiresAt   DateTime?
  createdAt   DateTime            @default(now())
  
  // Relations
  guild       Guild               @relation(fields: [guildId], references: [id], onDelete: Cascade)
  target      User                @relation("TargetLogs", fields: [targetId], references: [id])
  moderator   User                @relation("ModeratorLogs", fields: [moderatorId], references: [id])
  
  @@map("moderation_logs")
}

model Ticket {
  id            String        @id @default(cuid())
  guildId       String
  userId        String
  channelId     String?
  threadId      String?
  category      String?
  subject       String
  status        String        @default("OPEN")
  staffIds      String        @default("")  // Comma-separated IDs
  transcriptUrl String?
  metadata      String        @default("{}")
  createdAt     DateTime      @default(now())
  updatedAt     DateTime      @updatedAt
  closedAt      DateTime?
  
  // Relations
  guild         Guild         @relation(fields: [guildId], references: [id], onDelete: Cascade)
  user          User          @relation(fields: [userId], references: [id])
  
  @@map("tickets")
}

model RoleSnapshot {
  id        String    @id @default(cuid())
  guildId   String
  snapshot  String    // JSON as string
  takenAt   DateTime  @default(now())
  
  // Relations
  guild     Guild     @relation(fields: [guildId], references: [id], onDelete: Cascade)
  
  @@map("role_snapshots")
}

model VanityLog {
  id            String    @id @default(cuid())
  guildId       String
  previousVanity String?
  newVanity     String?
  actorId       String
  createdAt     DateTime  @default(now())
  
  // Relations
  guild         Guild     @relation(fields: [guildId], references: [id], onDelete: Cascade)
  actor         User      @relation(fields: [actorId], references: [id])
  
  @@map("vanity_logs")
}

model MusicQueue {
  id            String    @id @default(cuid())
  guildId       String    @unique
  queue         String    @default("[]")   // JSON as string
  currentTrack  String?                    // JSON as string
  volume        Float     @default(1.0)
  loop          String    @default("none") // none, track, queue
  shuffle       Boolean   @default(false)
  settings      String    @default("{}")   // JSON as string
  updatedAt     DateTime  @updatedAt
  
  // Relations
  guild         Guild     @relation(fields: [guildId], references: [id], onDelete: Cascade)
  
  @@map("music_queues")
}

model UserProfile {
  id              String    @id @default(cuid())
  guildId         String
  userId          String
  messageCount    Int       @default(0)
  voiceMinutes    Int       @default(0)
  xp              Int       @default(0)
  level           Int       @default(1)
  bio             String?
  badges          String    @default("")  // Comma-separated badges
  lastSeen        DateTime  @default(now())
  optOut          Boolean   @default(false)
  
  // Relations
  guild           Guild     @relation(fields: [guildId], references: [id], onDelete: Cascade)
  user            User      @relation(fields: [userId], references: [id])
  
  @@unique([guildId, userId])
  @@map("user_profiles")
}

model Birthday {
  id        String    @id @default(cuid())
  guildId   String
  userId    String
  month     Int       // 1-12
  day       Int       // 1-31
  year      Int?      // Optional birth year
  timezone  String?
  optIn     Boolean   @default(true)
  
  // Relations
  guild     Guild     @relation(fields: [guildId], references: [id], onDelete: Cascade)
  user      User      @relation(fields: [userId], references: [id])
  
  @@unique([guildId, userId])
  @@map("birthdays")
}

model AntiNukeWhitelist {
  id        String    @id @default(cuid())
  guildId   String
  userId    String
  reason    String?
  createdAt DateTime  @default(now())
  
  @@unique([guildId, userId])
  @@map("anti_nuke_whitelist")
}

model ExtraOwner {
  id        String    @id @default(cuid())
  guildId   String
  userId    String
  addedBy   String
  reason    String?
  addedAt   DateTime  @default(now())

  // Relations
  guild     Guild     @relation(fields: [guildId], references: [id], onDelete: Cascade)

  @@unique([guildId, userId])
  @@map("extra_owners")
}